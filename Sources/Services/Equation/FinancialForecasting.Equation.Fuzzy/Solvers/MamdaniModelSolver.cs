using System;
using System.Collections.Generic;
using System.Linq;

namespace FinancialForecasting.Equation
{
    public class MamdaniModelSolver : IFuzzySolver
    {
        public Tuple<double, Risk> Solve(IReadOnlyList<double> balance)
        {
            var x = balance.ToParameters();
            var l = new double[5, 6];

            if (x[0] < 0.4)
                l[0, 0] = 1;
            if ((x[0] >= 0.4) & (x[0] < 0.5))
            {
                l[0, 0] = 1 - (x[0] - 0.4)/0.1;
                l[1, 0] = 1 - (0.5 - x[0])/0.1;
            }
            if ((x[0] >= 0.5) & (x[0] < 0.6))
            {
                l[1, 0] = 1 - (x[0] - 0.5)/0.1;
                l[2, 0] = 1 - (0.6 - x[0])/0.1;
            }
            if ((x[0] >= 0.6) & (x[0] < 0.7))
            {
                l[2, 0] = 1 - (x[0] - 0.6)/0.1;
                l[3, 0] = 1 - (0.7 - x[0])/0.1;
            }
            if ((x[0] >= 0.7) & (x[0] < 0.8))
            {
                l[3, 0] = 1 - (x[0] - 0.7)/0.1;
                l[4, 0] = 1 - (0.8 - x[0])/0.1;
            }
            if (x[0] >= 0.8)
                l[4, 0] = 1;

            if (x[1] < 0.2)
                l[0, 1] = 1;
            if ((x[1] >= 0.2) & (x[1] < 0.4))
            {
                l[0, 1] = 1 - (x[1] - 0.2)/0.2;
                l[1, 1] = 1 - (0.4 - x[1])/0.2;
            }
            if ((x[1] >= 0.4) & (x[1] < 0.5))
            {
                l[1, 1] = 1 - (x[1] - 0.4)/0.1;
                l[2, 1] = 1 - (0.5 - x[1])/0.1;
            }
            if ((x[1] >= 0.5) & (x[1] < 0.6))
            {
                l[2, 1] = 1 - (x[1] - 0.5)/0.1;
                l[3, 1] = 1 - (0.6 - x[1])/0.1;
            }
            if ((x[1] >= 0.6) & (x[1] < 0.8))
            {
                l[3, 1] = 1 - (x[1] - 0.6)/0.2;
                l[4, 1] = 1 - (0.8 - x[1])/0.2;
            }
            if (x[1] >= 0.8)
                l[4, 1] = 1;

            if (x[2] < 0.4)
                l[0, 2] = 1;
            if ((x[2] >= 0.4) & (x[2] < 0.6))
            {
                l[0, 2] = 1 - (x[2] - 0.4)/0.2;
                l[1, 2] = 1 - (0.6 - x[2])/0.2;
            }
            if ((x[2] >= 0.6) & (x[2] < 0.8))
            {
                l[1, 2] = 1 - (x[2] - 0.6)/0.2;
                l[2, 2] = 1 - (0.8 - x[2])/0.2;
            }
            if ((x[2] >= 0.8) & (x[2] < 1))
            {
                l[2, 2] = 1 - (x[2] - 0.8)/0.2;
                l[3, 2] = 1 - (1 - x[2])/0.2;
            }
            if ((x[2] >= 1) & (x[2] < 1.2))
            {
                l[3, 2] = 1 - (x[2] - 1)/0.2;
                l[4, 2] = 1 - (1.2 - x[2])/0.2;
            }
            if ((x[2] >= 1.2))
                l[4, 2] = 1;

            if (x[3] < 0)
                l[0, 3] = 1;
            if ((x[3] >= 0) & (x[3] < 0.2))
            {
                l[0, 3] = 1 - (x[3])/0.2;
                l[1, 3] = 1 - (0.2 - x[3])/0.2;
            }
            if ((x[3] >= 0.2) & (x[3] < 0.4))
            {
                l[1, 3] = 1 - (x[3] - 0.2)/0.2;
                l[2, 3] = 1 - (0.4 - x[3])/0.2;
            }
            if ((x[3] >= 0.4) & (x[3] < 0.6))
            {
                l[2, 3] = 1 - (x[3] - 0.4)/0.2;
                l[3, 3] = 1 - (0.6 - x[3])/0.2;
            }
            if ((x[3] >= 0.6) & (x[3] < 0.8))
            {
                l[3, 3] = 1 - (x[3] - 0.6)/0.2;
                l[4, 3] = 1 - (0.8 - x[3])/0.2;
            }
            if ((x[3] >= 0.8))
                l[4, 3] = 1;

            if (x[4] < 0.4)
                l[0, 4] = 1;
            if ((x[4] >= 0.4) & (x[4] < 0.6))
            {
                l[0, 4] = 1 - (x[4] - 0.4)/0.2;
                l[1, 4] = 1 - (0.6 - x[4])/0.2;
            }
            if ((x[4] >= 0.6) & (x[4] < 0.8))
            {
                l[1, 4] = 1 - (x[4] - 0.6)/0.2;
                l[2, 4] = 1 - (0.8 - x[4])/0.2;
            }
            if ((x[4] >= 0.8) & (x[4] < 1))
            {
                l[2, 4] = 1 - (x[4] - 0.8)/0.2;
                l[3, 4] = 1 - (1 - x[4])/0.2;
            }
            if ((x[4] >= 1) & (x[4] < 1.2))
            {
                l[3, 4] = 1 - (x[4] - 1)/0.2;
                l[4, 4] = 1 - (1.2 - x[4])/0.2;
            }
            if ((x[4] >= 1.2))
                l[4, 4] = 1;

            if (x[5] < 0.05)
                l[0, 5] = 1;
            if ((x[5] >= 0.05) & (x[5] < 0.1))
            {
                l[0, 5] = 1 - (x[5] - 0.05)/0.05;
                l[1, 5] = 1 - (0.1 - x[5])/0.05;
            }
            if ((x[5] >= 0.1) & (x[5] < 0.2))
            {
                l[1, 5] = 1 - (x[5] - 0.1)/0.1;
                l[2, 5] = 1 - (0.2 - x[5])/0.1;
            }
            if ((x[5] >= 0.2) & (x[5] < 0.6))
            {
                l[2, 5] = 1 - (x[5] - 0.2)/0.4;
                l[3, 5] = 1 - (0.6 - x[5])/0.4;
            }
            if ((x[5] >= 0.6) & (x[5] < 1))
            {
                l[3, 5] = 1 - (x[5] - 0.6)/0.4;
                l[4, 5] = 1 - (1 - x[5])/0.4;
            }
            if ((x[5] >= 1))
                l[4, 5] = 1;

            var t = new int[15625];
            var k = 0;
            var y = Enumerable.Repeat(1.0, 15625).ToArray();
            var max = Enumerable.Repeat(0.0, 5).ToArray();
            double w = 0;
            double sum = 0;
            double g = 0;

            for (var a = 0; a < 5; a++)
            {
                for (var b = 0; b < 5; b++)
                {
                    for (var c = 0; c < 5; c++)
                    {
                        for (var d = 0; d < 5; d++)
                        {
                            for (var e = 0; e < 5; e++)
                            {
                                for (var f = 0; f < 5; f++)
                                {
                                    t[k] = 30 - a - b - c - d - e - f;
                                    if (y[k] > l[a, 0])
                                        y[k] = l[a, 0];
                                    if (y[k] > l[b, 1])
                                        y[k] = l[b, 1];
                                    if (y[k] > l[c, 2])
                                        y[k] = l[c, 2];
                                    if (y[k] > l[d, 3])
                                        y[k] = l[d, 3];
                                    if (y[k] > l[e, 4])
                                        y[k] = l[e, 4];
                                    if (y[k] > l[f, 5])
                                        y[k] = l[f, 5];
                                    k++;
                                }
                            }
                        }
                    }
                }
            }

            for (var j = 0; j < 15625; j++)
            {
                if ((t[j] > 24) & (y[j] > max[0]))
                    max[0] = y[j];
                if ((t[j] <= 24) & (t[j] > 18) & (y[j] > max[1]))
                    max[1] = y[j];
                if ((t[j] <= 18) & (t[j] > 12) & (y[j] > max[2]))
                    max[2] = y[j];
                if ((t[j] <= 12) & (t[j] > 6) & (y[j] > max[3]))
                    max[3] = y[j];
                if ((t[j] == 6) & (y[j] > max[4]))
                    max[4] = y[j];
            }

            w += 0.2*max[0];
            sum += 0.1*0.2*max[0];

            for (var i = 1; i < 5; i++)
            {
                if (max[i - 1] > 0.5)
                    if (max[i] > 0.5)
                    {
                        sum += (0.2*i + 0.1*(1 - max[i - 1]))*0.2*(1 - max[i - 1])*max[i - 1];
                        sum += (0.2*(i + 1) - 0.1*(1 - max[i]))*0.2*(1 - max[i])*max[i];
                        sum += (0.2*i + 0.2*(1 - max[i - 1]) +
                                (0.2*max[i - 1] - 0.1)*(1.0/3.0 - (1.0/3.0)*max[i - 1])/(0.5 + max[i - 1]))*0.1*
                               (max[i - 1] - 0.5)*(max[i - 1] + 0.5);
                        sum += (0.2*i + 0.1 + (0.2*max[i] - 0.1)*(((2.0/3.0)*max[i] - 1.0/6.0)/(max[i] + 0.5)))*0.1*
                               (max[i] - 0.5)*(max[i] + 0.5);

                        w += 0.2*(1 - max[i - 1])*max[i - 1];
                        w += 0.2*(1 - max[i])*max[i];
                        w += 0.1*(max[i - 1] - 0.5)*(max[i - 1] + 0.5);
                        w += 0.1*(max[i] - 0.5)*(max[i] + 0.5);
                    }
                    else
                    {
                        sum += (0.2*i + 0.1*(1 - max[i - 1]))*0.2*(1 - max[i - 1])*max[i - 1];
                        sum += (0.2*(i + 1 - max[i - 1]) +
                                0.2*(max[i - 1] - max[i])*(max[i]*2.0/3.0 - max[i - 1]/3.0)/(max[i] + max[i - 1]))*0.1*
                               (max[i - 1] + max[i])*(max[i - 1] - max[i]);
                        sum += (0.2*i + 0.15)*max[i]*0.1;

                        w += 0.2*(1 - max[i - 1])*max[i - 1];
                        w += 0.1*(max[i - 1] + max[i])*(max[i - 1] - max[i]);
                        w += max[i]*0.1;
                    }
                else if (max[i] > 0.5)
                {
                    sum += (0.2*i + 0.1*(1 - max[i - 1]))*0.2*(1 - max[i - 1])*max[i - 1];
                    sum += (0.2*(i + max[i - 1]) +
                            0.2*(max[i] - max[i - 1])*(max[i]*2.0/3.0 - max[i - 1]/3.0)/(max[i] + max[i - 1]))*0.1*
                           (max[i] + max[i - 1])*(max[i] - max[i - 1]);
                    sum += (0.2*i + 0.15)*max[i]*0.1;

                    w += 0.2*(1 - max[i - 1])*max[i - 1];
                    w += 0.1*(max[i] + max[i - 1])*(max[i] - max[i - 1]);
                    w += max[i]*0.1;
                }
                else if (Math.Abs(max[i] - max[i - 1]) < 0.00001)
                {
                    sum += (0.2*i + 0.1)*0.2*max[i];

                    w += 0.2*max[i];
                }
                else if (max[i - 1] < max[i])
                {
                    sum += (0.2*i + 0.1)*0.2*max[i - 1];
                    sum += (0.2*i + 0.2*(max[i]*2.0/3.0 + max[i - 1]/3.0))*(max[i] - max[i - 1])*(max[i] - max[i - 1])*
                           0.1;
                    sum += (0.2*i + 0.1 + 0.1*x[i])*(max[i] - max[i - 1])*0.2*(1 - max[i]);

                    w += 0.2*max[i - 1];
                    w += (max[i] - max[i - 1])*(max[i] - max[i - 1])*0.1;
                    w += (max[i] - max[i - 1])*0.2*(1 - max[i]);
                }
                else
                {
                    sum += (0.2*i + 0.1)*0.2*max[i];
                    sum += (0.2*i + 0.2 - 0.2*(max[i - 1]*2.0/3.0 + max[i]/3.0))*(max[i - 1] - max[i])*
                           (max[i - 1] - max[i])*0.1;
                    sum += (0.2*i + 0.1 - 0.1*x[i - 1])*(max[i - 1] - max[i])*0.2*(1 - max[i - 1]);

                    w += 0.2*max[i];
                    w += (max[i - 1] - max[i])*(max[i - 1] - max[i])*0.1;
                    w += (max[i - 1] - max[i])*0.2*(1 - max[i - 1]);
                }
            }

            g = sum/w;
            var risk = Risk.VeryHigh;
            if (g < 0.3)
                risk = Risk.VeryHigh;
            if ((g >= 0.3) & (g < 0.5))
                risk = Risk.High;
            if ((g >= 0.5) & (g < 0.7))
                risk = Risk.Average;
            if ((g >= 0.7) & (g < 0.9))
                risk = Risk.Low;
            if ((g >= 0.9) & (g <= 1))
                risk = Risk.VeryLow;

            return Tuple.Create(g, risk);
        }
    }
}