<?xml version="1.0"?>
<doc>
    <assembly>
        <name>LMDotNet</name>
    </assembly>
    <members>
        <member name="T:LMDotNet.LMSolver">
            <summary>
            Levenberg-Marquardt non-linear least squares solver based on lmfit
            </summary>
        </member>
        <member name="P:LMDotNet.LMSolver.Ftol">
            <summary>Relative error desired in the sum of squares.
            Termination occurs when both the actual and
            predicted relative reductions in the sum of squares
            are at most Ftol.</summary>
        </member>
        <member name="P:LMDotNet.LMSolver.Xtol">
            <summary> Relative error between last two approximations.
            Termination occurs when the relative error between
            two consecutive iterates is at most Xtol.</summary>
        </member>
        <member name="P:LMDotNet.LMSolver.Gtol">
            <summary> Orthogonality desired between fvec and its derivatives.
            Termination occurs when the cosine of the angle
            between fvec and any column of the Jacobian is at
            most Gtol in absolute value. (measure of degeneracy) </summary>
        </member>
        <member name="P:LMDotNet.LMSolver.Epsilon">
            <summary> Step used to calculate the Jacobian, should be
            slightly larger than the relative error in the
            user - supplied functions.</summary>
        </member>
        <member name="P:LMDotNet.LMSolver.InitialStepbound">
            <summary> Used in determining the initial step bound. This
            bound is set to the product of InitialStepbound and the
            Euclidean norm of diag*x if nonzero, or else to
            InitialStepbound itself. In most cases InitialStepbound should lie
            in the interval [0.1, 100.0]. Generally, the value
            100.0 is recommended.</summary>         
        </member>
        <member name="P:LMDotNet.LMSolver.Patience">
            <summary> Sets the maximum number of function evaluations
            to Patience * (number_of_parameters + 1)</summary>
        </member>
        <member name="P:LMDotNet.LMSolver.ScaleDiagonal">
            <summary>
            If true, the variables will be rescaled internally. Recommended value is 1.
            </summary>
        </member>
        <member name="P:LMDotNet.LMSolver.VerboseOutput">
            <summary> true: print status messages to stdout</summary>
        </member>
        <member name="M:LMDotNet.LMSolver.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Int32,System.Boolean,System.Boolean)">
            <param name="ftol">Relative error desired in the sum of squares.
            Termination occurs when both the actual and
            predicted relative reductions in the sum of squares
            are at most ftol.</param>
            <param name="xtol">Relative error between last two approximations.
            Termination occurs when the relative error between
            two consecutive iterates is at most xtol.</param>
            <param name="gtol">Orthogonality desired between fvec and its derivs.
            Termination occurs when the cosine of the angle
            between fvec and any column of the Jacobian is at
            most gtol in absolute value.</param>
            <param name="epsilon">Step used to calculate the Jacobian, should be
            slightly larger than the relative error in the
            user - supplied functions.</param>
            <param name="stepbound">Used in determining the initial step bound. This
            bound is set to the product of stepbound and the
            Euclidean norm of diag*x if nonzero, or else to
            stepbound itself. In most cases stepbound should lie
            in the interval (0.1,100.0). Generally, the value
            100.0 is recommended.</param>
            <param name="patience">Used to set the maximum number of function evaluations
            to patience * (number_of_parameters + 1)</param>
            <param name="scaleDiagonal">If 1, the variables will be rescaled internally. Recommended value is 1.</param>
            <param name="verbose">true: print status messages to stdout</param>
        </member>
        <member name="M:LMDotNet.LMSolver.CallNativeSolver(LMDotNet.Native.LMDelegate,System.Double[],LMDotNet.Native.AllocatorDelegate,LMDotNet.Native.DeallocatorDelegate,System.Int32)">
            <summary>
            Calls the native lmmin API from the lmfit package
            </summary>
            <param name="fun">The user supplied function to update the residue vector</param>
            <param name="parameters">initial guess for the parameters</param>
            <param name="allocate">Double array allocator used to allocate arrays that
            fun needs to access (parameter vector) and update (residue vector) when called</param>
            <param name="deallocate">Array deallocator</param>
            <param name="mData">Number of data points == number of equations == length of the residue vector</param>
            <returns>Optimization outcome and optimal paramters, if successful</returns>
        </member>
        <member name="M:LMDotNet.LMSolver.Minimize(System.Action{System.Double[],System.Double[]},System.Double[],System.Int32)">
            <summary>
            Determines the vector x that minimizes the squared L2-norm of a user-supplied
            function f, i.e. it determines x_opt = argmin_x ||f(x)||²
            </summary>
            <param name="f">Evaluates the system at the point x;<br/>
            first parameter:  x    (IN;  length = length(initialGuess));
            second parameter: f(x) (OUT; length = nDataPoints)</param>
            <param name="x0">Initial guess for x_opt; length determines the length of x</param>
            <param name="nDataPoints">Length of f(x) 
            == number of datapoints (for regression)        
            == number of equations (for solving NLS)
            == length of the residue vector</param>
            <remarks>Invariant: nDataPoints &gt;= length(x0)</remarks>
            <returns>Optimum x_opt (if successful) and solution status</returns>
        </member>
        <member name="M:LMDotNet.LMSolver.Solve(System.Action{System.Double[],System.Double[]},System.Double[])">
            <summary>
            Solves a system of non-linear equations (in a least-squares sense,
            i.e. by optimizing parameters to minimize a residue vector)
            </summary>
            <param name="f">Computes the residuals based on the current parameters;
            first parameter: current parameter vector (IN; length = length(initialGuess));
            second parameter: residuals (OUT; length = length(initialGuess))</param>
            <param name="x0">Initial guess for the free variables; length determines
            the number of free variables and the number of equations, and thus, residuals</param>
            <returns>Optimized parameters and status</returns>
        </member>
        <member name="M:LMDotNet.LMSolver.FitCurve(System.Func{System.Double,System.Double[],System.Double},System.Double[],System.Double[],System.Double[])">
            <summary>
            1D-curve fitting (non-linear regression): optimize a parameter vector beta
            for a model equation to minimize the sum of squared residuals, i.e.:
            x: sample point, y: measured data, y': predicted value by the model;
            Residual for datapoint i: eps_i = y_i - model(x_i, beta);
            find beta_opt = argmin_beta ||eps_i||²
            </summary>
            <param name="model">Regression model to fit to the data points; 
            first parameter: sample location x_i;
            second parameter: parameter vector beta;
            result: model prediction y' = model(x_i, beta)
            </param>
            <param name="beta0">Initial guess for the model parameter vector</param>
            <param name="xs">sampling locations</param>
            <param name="ys">samples (data points)</param>
            <returns>Optimized model parameters and status</returns>
            <remarks>Invariant: xs.Length == ys.Length</remarks>
        </member>
        <member name="M:LMDotNet.LMSolver.FitSurface(System.Func{System.Double,System.Double,System.Double[],System.Double},System.Double[],System.Double[],System.Double[],System.Double[])">
            <summary>
            2D-curve fitting (non-linear regression): optimize a parameter vector beta
            for a model equation to minimize the sum of squared residuals, i.e.:
            (x, y): sample point, z: measured data, z': predicted value by the model;
            Residual for datapoint i: eps_i = z_i - model(x_i, y_i, beta);
            find beta_opt = argmin_beta ||eps_i||²
            </summary>
            <param name="model">Regression model to fit to the data points; 
            first parameter: sample location x_i;
            second parameter: sample location y_i;
            third parameter: parameter vector beta;
            result: model prediction z' = model(x_i, y_i, beta)
            </param>
            <param name="beta0">Initial guess for the model parameter vector</param>
            <param name="xs">First coordinate of the sampling locations</param>
            <param name="ys">Second coordinate of the sampling locations</param>
            <param name="zs">samples (data points) for each (x, y) location</param>
            <returns>Optimized model parameters and status</returns>
            <remarks>Invariant: xs.Length == ys.Length == zs.Length</remarks>
        </member>
        <member name="M:LMDotNet.LMSolver.Fit(System.Func{System.Double[],System.Double[],System.Double},System.Double[],System.Double[][],System.Double[])">
            <summary>
            nD-curve fitting (non-linear regression): optimize a parameter vector beta
            for a model equation to minimize the sum of squared residuals, i.e.:
            x: n-dim sample point, z: measured data, z': predicted value by the model;
            Residual for datapoint i: eps_i = z_i - model(x_i, beta);
            find beta_opt = argmin_beta ||eps_i||²
            </summary>
            <param name="model">Regression model to fit to the data points; 
            first parameter: sample location x_i;
            second parameter: parameter vector beta;
            result: model prediction z' = model(x_i, beta)
            </param>
            <param name="beta0">Initial guess for the model parameter vector</param>
            <param name="samplePoints">Sample locations; first index: coordinate; second index: sample number</param>
            <param name="samples">Samples (data points) for each sample locations</param>
            <returns>Optimized model parameters and status</returns>
            <remarks>Invariant: samplePoints[i].Length == samples.Length for all i</remarks>
        </member>
        <member name="T:LMDotNet.Native.LMControlStruct">
            <summary>
            Controls the LMA solver options of LMFit.lmmin
            (corresponds to lm_control_struct from lmfit)
            </summary>
        </member>
        <member name="F:LMDotNet.Native.LMControlStruct.ftol">
            <summary>
            Relative error desired in the sum of squares.
            Termination occurs when both the actual and
            predicted relative reductions in the sum of squares
            are at most ftol.
            </summary>
        </member>
        <member name="F:LMDotNet.Native.LMControlStruct.xtol">
            <summary>
            Relative error between last two approximations.
            Termination occurs when the relative error between
            two consecutive iterates is at most xtol.
            </summary>
        </member>
        <member name="F:LMDotNet.Native.LMControlStruct.gtol">
            <summary>
            Orthogonality desired between fvec and its derivs.
            Termination occurs when the cosine of the angle
            between fvec and any column of the Jacobian is at
            most gtol in absolute value.
            </summary>
        </member>
        <member name="F:LMDotNet.Native.LMControlStruct.epsilon">
            <summary>
            Step used to calculate the Jacobian, should be
            slightly larger than the relative error in the
            user-supplied functions.
            </summary>
        </member>
        <member name="F:LMDotNet.Native.LMControlStruct.stepbound">
            <summary>
            Used in determining the initial step bound. This
            bound is set to the product of stepbound and the
            Euclidean norm of diag*x if nonzero, or else to
            stepbound itself. In most cases stepbound should lie
            in the interval (0.1,100.0). Generally, the value
            100.0 is recommended.
            </summary>
        </member>
        <member name="F:LMDotNet.Native.LMControlStruct.patience">
            <summary>
            Used to set the maximum number of function evaluations
            to patience*(number_of_parameters+1).
            </summary>
        </member>
        <member name="F:LMDotNet.Native.LMControlStruct.scale_diag">
            <summary>
            If 1, the variables will be rescaled internally.
            Recommended value is 1.
            </summary>
        </member>
        <member name="F:LMDotNet.Native.LMControlStruct.msgfile">
            <summary>
            Progress messages will be written to this file.
            </summary>
        </member>
        <member name="F:LMDotNet.Native.LMControlStruct.verbosity">
            <summary>
            OR'ed: 1: print some messages; 2: print Jacobian.
            </summary>
        </member>
        <member name="F:LMDotNet.Native.LMControlStruct.n_maxpri">
            <summary>
            -1, or max number of parameters to print.
            </summary>
        </member>
        <member name="F:LMDotNet.Native.LMControlStruct.m_maxpri">
            <summary>
            -1, or max number of residuals to print.
            </summary>
        </member>
        <member name="T:LMDotNet.Native.LMFit">
            <summary>
            APIs of lmfit
            </summary>
        </member>
        <member name="F:LMDotNet.Native.LMFit.dllName">
            <summary>
            File name of the native lmfit (shared) library
            </summary>
        </member>
        <member name="F:LMDotNet.Native.LMFit.lmfitDllHandle">
            <summary>
            Pointer to the dynamically (pre-)loaded lmfit library
            </summary>
        </member>
        <member name="M:LMDotNet.Native.LMFit.lmmin(System.Int32,System.Double[],System.Int32,System.IntPtr,LMDotNet.Native.LMDelegate,LMDotNet.Native.LMControlStruct@,LMDotNet.Native.LMStatusStruct@,LMDotNet.Native.AllocatorDelegate,LMDotNet.Native.DeallocatorDelegate)">
            <summary>
            Signature of the lmmin function, the core API of lmfit: performs
            generic non-linear least-squares minimization using the 
            Levenberg-Marquardt algorithm
            </summary>
            <param name="n_par">Number of free variables/parameters</param>
            <param name="par">Initial guess for the parameters; contains the optimized parameters afterwards</param>
            <param name="m_dat">Number of data points/equations</param>
            <param name="data">Additional data passed to the evaluate callback (void*)</param>
            <param name="evaluate">User-supplied callback, which evaluates the system with the current parameters and updates the residue vector</param>
            <param name="control">Settings for the solver</param>
            <param name="status">Result/status of the optimzation process</param>
            <param name="arrayAllocator">Allocator to use for allocating arrays</param>
            <param name="arrayDeallocator">Deallocator for freeing memory allocated using arrayAllocator</param>
        </member>
        <member name="T:LMDotNet.Native.LMStatusStruct">
            <summary>
            Contains the status of the optimization process
            (corresponds to lm_status_struct)
            </summary>
        </member>
        <member name="F:LMDotNet.Native.LMStatusStruct.fnorm">
            <summary>
            norm of the residue vector fvec.
            </summary>
        </member>
        <member name="F:LMDotNet.Native.LMStatusStruct.nfev">
            <summary>
            actual number of iterations.
            </summary>
        </member>
        <member name="F:LMDotNet.Native.LMStatusStruct.outcome">
            <summary>
            Status indicator. Nonnegative values are used as index
            for the message text lm_infmsg, set in lmmin.c.
            </summary>
        </member>
        <member name="F:LMDotNet.Native.LMStatusStruct.userbreak">
            <summary>
            Set when function evaluation requests termination.
            </summary>
        </member>
        <member name="T:LMDotNet.Native.AllocatorDelegate">
            <summary>
            Signature of the double array allocator passed into LMFit.lmmin
            </summary>
            <param name="count">Number of doubles to allocate</param>
            <returns>Pointer to the base address of the allocated array</returns>
        </member>
        <member name="T:LMDotNet.Native.DeallocatorDelegate">
            <summary>
            Signature of the array deallocator ("free") passed into LMFit.lmmin
            </summary>
            <param name="ptr">Managed array to "free" (unpin)</param>
        </member>
        <member name="T:LMDotNet.Native.LMDelegate">
            <summary>
            Signature of the user-defined equation (system) that is to be evaluated
            </summary>
            <param name="par">[In] Current values of the free variables/parameters (double*)</param>
            <param name="m_dat">Number of equations/data points</param>
            <param name="data">[In] Auxilliary data (void*) (for curve fitting; otherwise usually 0/null)</param>
            <param name="fvec">[Out] Residue vector resulting from evaluating the system using the parameters in par (double*)</param>
            <param name="userbreak">[Out] Request termination if *userbreak == 1 (int*) (usually 0)</param>
        </member>
        <member name="T:LMDotNet.Native.PinnedArrayPool`1">
            <summary>
            Allocate arrays and pin them on the managed heap so
            they can be used from both managed and native code without
            requiring marshalling and/or copying.
            When disposed, the pool automatically unpins all allocated arrays.
            </summary>
            <remarks>This allocator is NOT thread safe!</remarks>    
            <typeparam name="T">Type of the array elements; must be an unmanged 
            (blitable) type</typeparam>
        </member>
        <member name="M:LMDotNet.Native.PinnedArrayPool`1.AllocatePinnedArray(System.Int32)">
            <summary>
            Allocate a new pinned T[] and return its base address
            </summary>
            <param name="count">Length (number of elements) of the new array</param>
            <returns>Base address of the pinned array</returns>
        </member>
        <member name="M:LMDotNet.Native.PinnedArrayPool`1.UnpinArray(System.IntPtr)">
            <summary>
            Unpin the pinned array at the given address
            </summary>
            <param name="baseAddress">Base address of the array to unpin</param>
        </member>
        <member name="T:LMDotNet.OptimizationResult">
            <summary>
            Information about the optimization outcome; if the
            optimization procedure converged, OptimizedParameters
            contains the parameters, which minimize the user
            supplied function.
            </summary>
        </member>
        <member name="P:LMDotNet.OptimizationResult.OptimizedParameters">
            <summary>
            Determined optimial parameters
            </summary>
        </member>
        <member name="P:LMDotNet.OptimizationResult.ErrorNorm">
            <summary>
            Norm of the residue vector fvec
            </summary> 
        </member>
        <member name="P:LMDotNet.OptimizationResult.Iterations">
            <summary>
            actual number of iterations
            </summary>
        </member>
        <member name="P:LMDotNet.OptimizationResult.Outcome">
            <summary>
            Status indicator (converged, failed, ...)
            </summary>
        </member>
        <member name="P:LMDotNet.OptimizationResult.Message">
            <summary>
            Status message
            </summary>
        </member>
        <member name="P:LMDotNet.OptimizationResult.TerminatedByUserRequest">
            <summary>
            Set when function evaluation requests termination
            </summary>
        </member>
        <member name="T:LMDotNet.SolverStatus">
            <summary>
            Encodes possible result conditions for the LM solver
            </summary>
        </member>
        <member name="F:LMDotNet.SolverStatus.Underflow">
            <summary>
            sum of squares below underflow limit
            </summary>
        </member>
        <member name="F:LMDotNet.SolverStatus.ConvergedSumSq">
            <summary>
            the relative error in the sum of squares is at most tol
            </summary>
        </member>
        <member name="F:LMDotNet.SolverStatus.ConvergedParam">
            <summary>
            the relative error of the parameter vector is at most tol
            </summary>
        </member>
        <member name="F:LMDotNet.SolverStatus.ConvergedBoth">
            <summary>
            both errors are at most tol
            </summary>
        </member>
        <member name="F:LMDotNet.SolverStatus.Trapped">
            <summary>
            trapped by degeneracy; increasing epsilon might help
            </summary>
        </member>
        <member name="F:LMDotNet.SolverStatus.Exhausted">
            <summary>
            number of function calls exceeding preset patience/maxIterations
            </summary>
        </member>
        <member name="F:LMDotNet.SolverStatus.FailedFTOL">
            <summary>
            ftol &lt; tol: cannot reduce sum of squares any further
            </summary>
        </member>
        <member name="F:LMDotNet.SolverStatus.FailedXTOL">
            <summary>
            xtol &lt; tol: cannot improve approximate solution any further
            </summary>
        </member>
        <member name="F:LMDotNet.SolverStatus.FailedGTOL">
            <summary>
            gtol &lt; tol: cannot improve approximate solution any further
            </summary>
        </member>
        <member name="F:LMDotNet.SolverStatus.Crashed">
            <summary>
            not enough memory
            </summary>
        </member>
        <member name="F:LMDotNet.SolverStatus.Exploded">
            <summary>
            fatal coding error: improper input parameters
            </summary>
        </member>
        <member name="F:LMDotNet.SolverStatus.Stopped">
            <summary>
            break requested within function evaluation
            </summary>
        </member>
    </members>
</doc>
